const axios = require('axios');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const GOOGLE_SCRIPT_URL = 'https://script.google.com/macros/s/AKfycbzB2ZQuWkBNTYwK7aiLwhmWdMfS-XQUQMXBJ2B36PJPzSmb7LdWzHZRF2PKZ_8HNS7M/exec';

const EMOTIONS = {
  '—Ä–∞–¥–æ—Å—Ç—å': 'üòä', '–≥—Ä—É—Å—Ç—å': 'üò¢', '–∑–ª–æ—Å—Ç—å': 'üò†', '—Å—Ç—Ä–∞—Ö': 'üò∞',
  '–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ': 'ü§¢', '–∏–Ω—Ç–µ—Ä–µ—Å': 'ü§î', '–±–µ–∑—Ä–∞–∑–ª–∏—á–∏–µ': 'üòê',
  '–ø—Ä–∏—è—Ç–Ω—É—é_—É—Å—Ç–∞–ª–æ—Å—Ç—å': 'üòå', '—Ç—Ä–µ–≤–æ–≥—É': 'üòü', '–≤–∏–Ω—É': 'üòî'
};

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
const userSessions = new Map();

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const update = req.body;
    console.log('Update:', JSON.stringify(update));

    // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK
    res.status(200).json({ status: 'ok' });

    if (update.message) {
      await handleMessage(update.message);
    } else if (update.callback_query) {
      await handleCallback(update.callback_query);
    }

  } catch (error) {
    console.error('Error:', error);
    res.status(200).json({ status: 'error' });
  }
}

async function handleMessage(message) {
  const chatId = message.chat.id;
  const text = message.text || '';

  if (text === '/start') {
    await sendStartMessage(chatId);
  } else {
    const session = userSessions.get(chatId);
    if (session && session.emotion && session.intensity && !session.reason) {
      await saveToGoogleSheets(chatId, session.emotion, session.intensity, text);
    } else {
      await sendMessage(chatId, 'ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É "üìù –í–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å" –¥–ª—è –Ω–∞—á–∞–ª–∞.');
    }
  }
}

async function handleCallback(callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const messageId = callbackQuery.message.message_id;
  const data = callbackQuery.data;

  await answerCallbackQuery(callbackQuery.id);

  if (data === 'add_entry') {
    userSessions.delete(chatId);
    await showEmotionKeyboard(chatId, messageId);
  } else if (data.startsWith('emotion_')) {
    const emotion = data.replace('emotion_', '');
    userSessions.set(chatId, { emotion });
    await showIntensityKeyboard(chatId, messageId, emotion);
  } else if (data.startsWith('intensity_')) {
    const intensity = parseInt(data.replace('intensity_', ''));
    const session = userSessions.get(chatId) || {};
    userSessions.set(chatId, { ...session, intensity });
    await askForReason(chatId, messageId, session.emotion, intensity);
  }
}

async function sendStartMessage(chatId) {
  const keyboard = {
    inline_keyboard: [[
      { text: 'üìù –í–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å', callback_data: 'add_entry' }
    ]]
  };

  const text = `üåü <b>–î–Ω–µ–≤–Ω–∏–∫ —ç–º–æ—Ü–∏–π</b>

–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å —Å–µ–±—è.

–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å üëá`;

  await sendMessage(chatId, text, keyboard);
}

async function showEmotionKeyboard(chatId, messageId) {
  const emotions = Object.keys(EMOTIONS);
  const keyboard = { inline_keyboard: [] };

  for (let i = 0; i < emotions.length; i += 2) {
    const row = [];
    for (let j = 0; j < 2 && i + j < emotions.length; j++) {
      const emotion = emotions[i + j];
      const emoji = EMOTIONS[emotion];
      row.push({
        text: `${emoji} ${emotion.charAt(0).toUpperCase() + emotion.slice(1).replace('_', ' ')}`,
        callback_data: `emotion_${emotion}`
      });
    }
    keyboard.inline_keyboard.push(row);
  }

  const text = `üé≠ <b>–ß—Ç–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?</b>

–í—ã–±–µ—Ä–∏ —ç–º–æ—Ü–∏—é:`;

  await editMessage(chatId, messageId, text, keyboard);
}

async function showIntensityKeyboard(chatId, messageId, emotion) {
  const keyboard = {
    inline_keyboard: [
      [{ text: '–°–ª–∞–±–∞—è (1-3)', callback_data: 'ignore' }],
      [
        { text: '1Ô∏è‚É£ 1', callback_data: 'intensity_1' },
        { text: '2Ô∏è‚É£ 2', callback_data: 'intensity_2' },
        { text: '3Ô∏è‚É£ 3', callback_data: 'intensity_3' }
      ],
      [{ text: '–°—Ä–µ–¥–Ω—è—è (4-7)', callback_data: 'ignore' }],
      [
        { text: '4Ô∏è‚É£ 4', callback_data: 'intensity_4' },
        { text: '5Ô∏è‚É£ 5', callback_data: 'intensity_5' },
        { text: '6Ô∏è‚É£ 6', callback_data: 'intensity_6' },
        { text: '7Ô∏è‚É£ 7', callback_data: 'intensity_7' }
      ],
      [{ text: '–°–∏–ª—å–Ω–∞—è (8-10)', callback_data: 'ignore' }],
      [
        { text: '8Ô∏è‚É£ 8', callback_data: 'intensity_8' },
        { text: '9Ô∏è‚É£ 9', callback_data: 'intensity_9' },
        { text: 'üîü 10', callback_data: 'intensity_10' }
      ]
    ]
  };

  const emoji = EMOTIONS[emotion];
  const text = `üìä <b>–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: ${emoji} ${emotion.replace('_', ' ')}</b>

–ù–∞—Å–∫–æ–ª—å–∫–æ —Å–∏–ª—å–Ω–æ —Ç—ã —ç—Ç–æ –æ—â—É—â–∞–µ—à—å?`;

  await editMessage(chatId, messageId, text, keyboard);
}

async function askForReason(chatId, messageId, emotion, intensity) {
  let level, levelEmoji;
  if (intensity <= 3) {
    level = '—Å–ª–∞–±–∞—è'; levelEmoji = 'üü¢';
  } else if (intensity <= 7) {
    level = '—Å—Ä–µ–¥–Ω—è—è'; levelEmoji = 'üü°';
  } else {
    level = '—Å–∏–ª—å–Ω–∞—è'; levelEmoji = 'üî¥';
  }

  const text = `üí≠ <b>–ü–æ—á–µ–º—É —Ç—ã —ç—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å?</b>

–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: ${levelEmoji} ${level} (${intensity}/10)

–û–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—É:`;

  await editMessage(chatId, messageId, text);
}

async function saveToGoogleSheets(chatId, emotion, intensity, reason) {
  try {
    await axios.post(GOOGLE_SCRIPT_URL, {
      action: 'save_emotion',
      emotion: emotion.replace('_', ' '),
      intensity,
      reason,
      timestamp: new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })
    });

    const emoji = EMOTIONS[emotion];
    let level, levelEmoji;
    if (intensity <= 3) {
      level = '—Å–ª–∞–±–∞—è'; levelEmoji = 'üü¢';
    } else if (intensity <= 7) {
      level = '—Å—Ä–µ–¥–Ω—è—è'; levelEmoji = 'üü°';
    } else {
      level = '—Å–∏–ª—å–Ω–∞—è'; levelEmoji = 'üî¥';
    }

    const keyboard = {
      inline_keyboard: [[
        { text: 'üìù –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –∑–∞–ø–∏—Å—å', callback_data: 'add_entry' }
      ]]
    };

    const text = `‚úÖ <b>–ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!</b>

üé≠ –≠–º–æ—Ü–∏—è: ${emoji} ${emotion.replace('_', ' ')}
üìä –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: ${levelEmoji} ${level} (${intensity}/10)
üí≠ –ü—Ä–∏—á–∏–Ω–∞: ${reason}

–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!`;

    await sendMessage(chatId, text, keyboard);
    userSessions.delete(chatId);

  } catch (error) {
    console.error('Save error:', error);
    await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.');
  }
}

async function sendMessage(chatId, text, keyboard = null) {
  const payload = {
    chat_id: chatId,
    text,
    parse_mode: 'HTML'
  };

  if (keyboard) {
    payload.reply_markup = JSON.stringify(keyboard);
  }

  await axios.post(`https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`, payload);
}

async function editMessage(chatId, messageId, text, keyboard = null) {
  const payload = {
    chat_id: chatId,
    message_id: messageId,
    text,
    parse_mode: 'HTML'
  };

  if (keyboard) {
    payload.reply_markup = JSON.stringify(keyboard);
  }

  await axios.post(`https://api.telegram.org/bot${TELEGRAM_TOKEN}/editMessageText`, payload);
}

async function answerCallbackQuery(callbackQueryId) {
  await axios.post(`https://api.telegram.org/bot${TELEGRAM_TOKEN}/answerCallbackQuery`, {
    callback_query_id: callbackQueryId
  });
}
