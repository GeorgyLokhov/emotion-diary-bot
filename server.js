const express = require('express');
const { google } = require('googleapis');
require('dotenv').config();

const app = express();
app.use(express.json());

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const GOOGLE_SHEET_ID = process.env.GOOGLE_SHEET_ID;
const PORT = process.env.PORT || 3000;

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
const STATES = {
  NONE: 'none',
  CHOOSING_EMOTIONS: 'choosing_emotions',
  CHOOSING_INTENSITY_FOR_EMOTION: 'choosing_intensity_for_emotion',
  ENTERING_REASON: 'entering_reason'
};

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —ç–º–æ—Ü–∏–∏ —Å —ç–º–æ–¥–∑–∏
const EMOTIONS = {
  '—Ä–∞–¥–æ—Å—Ç—å': 'üòä',
  '—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å': 'üòé',
  '–∏–Ω—Ç–µ—Ä–µ—Å': 'ü§î',
  '–ø—Ä–∏—è—Ç–Ω—É—é —É—Å—Ç–∞–ª–æ—Å—Ç—å': 'üôÇ‚Äç‚ÜïÔ∏è',
  '—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ': 'üòå',
  '—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ': 'üôÇ',
  '–±–ª—É–∂–¥–∞—é—â–µ–µ –≤–Ω–∏–º–∞–Ω–∏–µ': 'üò∂‚Äçüå´Ô∏è',
  '–∞–ø–∞—Ç–∏—é/–±–µ–∑—Ä–∞–∑–ª–∏—á–∏–µ': 'üò∂',
  '—É—Å—Ç–∞–ª–æ—Å—Ç—å': 'üòû',
  '—Å–º—è—Ç–µ–Ω–∏–µ/—Ä–∞—Å—Ç–µ—Ä—è–Ω–Ω–æ—Å—Ç—å': 'ü´§',
  '—Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ': 'üò†',
  '—Ç—Ä–µ–≤–æ–≥—É': 'üòü',
  '—Å—Ç—ã–¥/–≤–∏–Ω—É': 'üò£',
  '–¥–∏–∑–º–æ—Ä–∞–ª—å/–ø–æ–¥–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç—å': 'üòñ'
};

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π
const userSessions = new Map();

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
function createSession() {
  return {
    state: STATES.NONE,
    selectedEmotions: [], // [{emotion: string, intensity: number}]
    currentEmotionForIntensity: null,
    previousState: null,
    messageId: null
  };
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets API
let sheetsClient;
async function initializeGoogleSheets() {
  try {
    let auth;
    
    // –ü—Ä–æ–±—É–µ–º Secret File —Å–Ω–∞—á–∞–ª–∞
    try {
      auth = new google.auth.GoogleAuth({
        keyFile: '/etc/secrets/google-credentials.json',
        scopes: ['https://www.googleapis.com/auth/spreadsheets']
      });
      console.log('‚úÖ Using Secret File credentials');
    } catch (error) {
      console.log('Secret file not found, trying environment variable...');
      
      // Fallback –Ω–∞ Environment Variable
      if (process.env.GOOGLE_CREDENTIALS) {
        const credentials = JSON.parse(process.env.GOOGLE_CREDENTIALS);
        auth = new google.auth.GoogleAuth({
          credentials: credentials,
          scopes: ['https://www.googleapis.com/auth/spreadsheets']
        });
        console.log('‚úÖ Using Environment Variable credentials');
      } else {
        throw new Error('No Google credentials found');
      }
    }
    
    sheetsClient = google.sheets({ version: 'v4', auth });
    console.log('‚úÖ Google Sheets API initialized successfully');
    
  } catch (error) {
    console.error('‚ùå Google Sheets initialization failed:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –≤ Google Sheets —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º —è—á–µ–µ–∫
async function writeToSheetWithMerge(selectedEmotions, reason) {
  try {
    const now = new Date();
    const currentDateTime = now.toLocaleString('ru-RU', { 
      timeZone: 'Europe/Moscow',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
    });
    
    const [dateStr, timeStr] = currentDateTime.split(', ');
    
    console.log(`Saving data: Date=${dateStr}, Time=${timeStr}, Emotions=${selectedEmotions.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headerCheck = await sheetsClient.spreadsheets.values.get({
      spreadsheetId: GOOGLE_SHEET_ID,
      range: 'A1:E1',
    });
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if (!headerCheck.data.values || !headerCheck.data.values[0] || headerCheck.data.values[0][0] !== '–î–∞—Ç–∞') {
      await sheetsClient.spreadsheets.values.update({
        spreadsheetId: GOOGLE_SHEET_ID,
        range: 'A1:E1',
        valueInputOption: 'RAW',
        resource: {
          values: [['–î–∞—Ç–∞', '–í—Ä–µ–º—è', '–ß—Ç–æ —è —á—É–≤—Å—Ç–≤—É—é?', '–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å', '–ü–æ—á–µ–º—É —è —ç—Ç–æ —á—É–≤—Å—Ç–≤—É—é?']]
        }
      });
      console.log('‚úÖ Headers created');
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Å—Ç–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–æ–±–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    const sheetInfo = await sheetsClient.spreadsheets.values.get({
      spreadsheetId: GOOGLE_SHEET_ID,
      range: 'A:A',
    });
    
    const nextRow = (sheetInfo.data.values ? sheetInfo.data.values.length : 1) + 1;
    const startRow = nextRow - 1; // –ò–Ω–¥–µ–∫—Å –¥–ª—è API (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0)
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
    const values = [];
    selectedEmotions.forEach((emotionData, index) => {
      if (index === 0) {
        // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞—Ç—É, –≤—Ä–µ–º—è, —ç–º–æ—Ü–∏—é, –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        values.push([dateStr, timeStr, emotionData.emotion, emotionData.intensity, reason]);
      } else {
        // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–æ–ª—å–∫–æ —ç–º–æ—Ü–∏—é –∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
        values.push(['', '', emotionData.emotion, emotionData.intensity, '']);
      }
    });

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    await sheetsClient.spreadsheets.values.append({
      spreadsheetId: GOOGLE_SHEET_ID,
      range: 'A:E',
      valueInputOption: 'RAW',
      resource: {
        values: values
      }
    });

    // –ï—Å–ª–∏ —ç–º–æ—Ü–∏–π –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π, –æ–±—ä–µ–¥–∏–Ω—è–µ–º —è—á–µ–π–∫–∏ –¥–ª—è –¥–∞—Ç—ã, –≤—Ä–µ–º–µ–Ω–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    if (selectedEmotions.length > 1) {
      const requests = [];
      
      // –°–ù–ê–ß–ê–õ–ê —Ä–∞–∑—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ —è—á–µ–π–∫–∏ –≤ –Ω—É–∂–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
      const unmergeRequests = [];
      
      // –†–∞–∑—ä–µ–¥–∏–Ω—è–µ–º –¥–∞—Ç—É (–∫–æ–ª–æ–Ω–∫–∞ A)
      unmergeRequests.push({
        unmergeCells: {
          range: {
            sheetId: 0,
            startRowIndex: startRow,
            endRowIndex: startRow + selectedEmotions.length,
            startColumnIndex: 0,
            endColumnIndex: 1
          }
        }
      });

      // –†–∞–∑—ä–µ–¥–∏–Ω—è–µ–º –≤—Ä–µ–º—è (–∫–æ–ª–æ–Ω–∫–∞ B)
      unmergeRequests.push({
        unmergeCells: {
          range: {
            sheetId: 0,
            startRowIndex: startRow,
            endRowIndex: startRow + selectedEmotions.length,
            startColumnIndex: 1,
            endColumnIndex: 2
          }
        }
      });

      // –†–∞–∑—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∫–æ–ª–æ–Ω–∫–∞ E)
      unmergeRequests.push({
        unmergeCells: {
          range: {
            sheetId: 0,
            startRowIndex: startRow,
            endRowIndex: startRow + selectedEmotions.length,
            startColumnIndex: 4,
            endColumnIndex: 5
          }
        }
      });

      // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–∑—ä–µ–¥–∏–Ω–µ–Ω–∏–µ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —è—á–µ–π–∫–∏ –Ω–µ –±—ã–ª–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã)
      try {
        await sheetsClient.spreadsheets.batchUpdate({
          spreadsheetId: GOOGLE_SHEET_ID,
          resource: {
            requests: unmergeRequests
          }
        });
        console.log('‚úÖ Existing merged cells unmerged');
      } catch (unmergeError) {
        console.log('‚ÑπÔ∏è No existing merged cells to unmerge (this is normal)');
      }

      // –¢–ï–ü–ï–†–¨ –æ–±—ä–µ–¥–∏–Ω—è–µ–º —è—á–µ–π–∫–∏
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞—Ç—É (–∫–æ–ª–æ–Ω–∫–∞ A)
      requests.push({
        mergeCells: {
          range: {
            sheetId: 0,
            startRowIndex: startRow,
            endRowIndex: startRow + selectedEmotions.length,
            startColumnIndex: 0,
            endColumnIndex: 1
          },
          mergeType: 'MERGE_ALL'
        }
      });

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Ä–µ–º—è (–∫–æ–ª–æ–Ω–∫–∞ B)
      requests.push({
        mergeCells: {
          range: {
            sheetId: 0,
            startRowIndex: startRow,
            endRowIndex: startRow + selectedEmotions.length,
            startColumnIndex: 1,
            endColumnIndex: 2
          },
          mergeType: 'MERGE_ALL'
        }
      });

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∫–æ–ª–æ–Ω–∫–∞ E)
      requests.push({
        mergeCells: {
          range: {
            sheetId: 0,
            startRowIndex: startRow,
            endRowIndex: startRow + selectedEmotions.length,
            startColumnIndex: 4,
            endColumnIndex: 5
          },
          mergeType: 'MERGE_ALL'
        }
      });

      // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
      await sheetsClient.spreadsheets.batchUpdate({
        spreadsheetId: GOOGLE_SHEET_ID,
        resource: {
          requests: requests
        }
      });

      console.log('‚úÖ Cells merged successfully');
    }
    
    console.log(`‚úÖ Data written to Google Sheets: ${selectedEmotions.length} emotions`);
    return true;
    
  } catch (error) {
    console.error('‚ùå Error writing to Google Sheets:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
async function sendMessage(chatId, text, keyboard = null) {
  const url = `https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`;
  const payload = {
    chat_id: chatId,
    text: text,
    parse_mode: 'HTML'
  };
  
  if (keyboard) {
    payload.reply_markup = JSON.stringify(keyboard);
  }
  
  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error('Telegram API error:', errorText);
    } else {
      console.log(`‚úÖ Message sent to ${chatId}`);
    }
  } catch (error) {
    console.error('Send message error:', error);
  }
}

async function editMessage(chatId, messageId, text, keyboard = null) {
  const url = `https://api.telegram.org/bot${TELEGRAM_TOKEN}/editMessageText`;
  const payload = {
    chat_id: chatId,
    message_id: messageId,
    text: text,
    parse_mode: 'HTML'
  };
  
  if (keyboard) {
    payload.reply_markup = JSON.stringify(keyboard);
  }
  
  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    
    if (!response.ok) {
      console.error('Edit message error:', await response.text());
    }
  } catch (error) {
    console.error('Edit message error:', error);
  }
}

async function answerCallbackQuery(callbackQueryId) {
  const url = `https://api.telegram.org/bot${TELEGRAM_TOKEN}/answerCallbackQuery`;
  
  try {
    await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ callback_query_id: callbackQueryId })
    });
  } catch (error) {
    console.error('Answer callback error:', error);
  }
}

// Webhook endpoint –¥–ª—è Telegram
app.post('/webhook', async (req, res) => {
  try {
    const update = req.body;
    
    // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º Telegram
    res.status(200).json({ status: 'ok' });
    
    console.log('Update received:', JSON.stringify(update));
    
    if (update.message) {
      await handleMessage(update.message);
    } else if (update.callback_query) {
      await handleCallback(update.callback_query);
    }
    
  } catch (error) {
    console.error('Webhook error:', error);
    res.status(200).json({ status: 'error' });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function handleMessage(message) {
  const chatId = message.chat.id;
  const text = message.text || '';
  
  console.log(`Message from ${chatId}: "${text}"`);
  
  if (text === '/start') {
    userSessions.delete(chatId);
    await sendStartMessage(chatId);
  } else {
    const session = userSessions.get(chatId);
    
    if (session && session.state === STATES.ENTERING_REASON && 
        session.selectedEmotions.length > 0) {
      await saveEmotionEntry(chatId, text);
    } else {
      const keyboard = {
        inline_keyboard: [[
          { text: 'üìù –í–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å', callback_data: 'add_entry' }
        ]]
      };
      
      await sendMessage(chatId, 
        'ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É "üìù –í–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å" –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –¥–Ω–µ–≤–Ω–∏–∫–æ–º —ç–º–æ—Ü–∏–π.', 
        keyboard);
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
async function handleCallback(callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const messageId = callbackQuery.message.message_id;
  const data = callbackQuery.data;
  
  console.log(`Callback from ${chatId}: ${data}`);
  
  await answerCallbackQuery(callbackQuery.id);
  
  let session = userSessions.get(chatId) || createSession();
  session.messageId = messageId;
  
  if (data === 'add_entry') {
    session = createSession();
    session.state = STATES.CHOOSING_EMOTIONS;
    session.messageId = messageId;
    userSessions.set(chatId, session);
    await showEmotionKeyboard(chatId, messageId);
    
  } else if (data === 'done_selecting_emotions') {
    if (session.selectedEmotions.length === 0) {
      return; // –ù–µ–ª—å–∑—è –∑–∞–≤–µ—Ä—à–∏—Ç—å –±–µ–∑ –≤—ã–±–æ—Ä–∞ —ç–º–æ—Ü–∏–π
    }
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–µ—Ä–≤–æ–π —ç–º–æ—Ü–∏–∏
    session.currentEmotionForIntensity = session.selectedEmotions[0].emotion;
    session.state = STATES.CHOOSING_INTENSITY_FOR_EMOTION;
    userSessions.set(chatId, session);
    await showIntensityKeyboard(chatId, messageId, session.currentEmotionForIntensity, 1, session.selectedEmotions.length);
    
  } else if (data === 'back') {
    await handleBack(chatId, messageId, session);
    
  } else if (data === 'cancel') {
    await handleCancel(chatId, messageId);
    
  } else if (data.startsWith('emotion_')) {
    const emotion = data.replace('emotion_', '');
    await toggleEmotion(chatId, messageId, session, emotion);
    
  } else if (data.startsWith('intensity_')) {
    const intensity = parseInt(data.replace('intensity_', ''));
    await setIntensityForCurrentEmotion(chatId, messageId, session, intensity);
    
  } else if (data === 'ignore') {
    return;
  }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —ç–º–æ—Ü–∏–∏
async function toggleEmotion(chatId, messageId, session, emotion) {
  const existingIndex = session.selectedEmotions.findIndex(e => e.emotion === emotion);
  
  if (existingIndex >= 0) {
    // –£–±–∏—Ä–∞–µ–º —ç–º–æ—Ü–∏—é
    session.selectedEmotions.splice(existingIndex, 1);
  } else {
    // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏—é (–±–µ–∑ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞)
    session.selectedEmotions.push({ emotion, intensity: null });
  }
  
  userSessions.set(chatId, session);
  await showEmotionKeyboard(chatId, messageId);
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —ç–º–æ—Ü–∏–∏
async function setIntensityForCurrentEmotion(chatId, messageId, session, intensity) {
  // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â—É—é —ç–º–æ—Ü–∏—é –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
  const emotionIndex = session.selectedEmotions.findIndex(e => e.emotion === session.currentEmotionForIntensity);
  if (emotionIndex >= 0) {
    session.selectedEmotions[emotionIndex].intensity = intensity;
  }
  
  // –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â—É—é —ç–º–æ—Ü–∏—é –±–µ–∑ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
  const nextEmotion = session.selectedEmotions.find(e => e.intensity === null);
  
  if (nextEmotion) {
    // –ï—Å—Ç—å –µ—â–µ —ç–º–æ—Ü–∏–∏ –±–µ–∑ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
    session.currentEmotionForIntensity = nextEmotion.emotion;
    userSessions.set(chatId, session);
    
    const currentNumber = session.selectedEmotions.findIndex(e => e.emotion === nextEmotion.emotion) + 1;
    await showIntensityKeyboard(chatId, messageId, nextEmotion.emotion, currentNumber, session.selectedEmotions.length);
  } else {
    // –í—Å–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    session.state = STATES.ENTERING_REASON;
    session.currentEmotionForIntensity = null;
    userSessions.set(chatId, session);
    await askForReason(chatId, messageId, session.selectedEmotions);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏ –æ—Ç–º–µ–Ω—ã
async function handleBack(chatId, messageId, session) {
  switch (session.state) {
    case STATES.CHOOSING_INTENSITY_FOR_EMOTION:
      // –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —ç–º–æ—Ü–∏–π
      session.state = STATES.CHOOSING_EMOTIONS;
      session.currentEmotionForIntensity = null;
      // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
      session.selectedEmotions.forEach(e => e.intensity = null);
      userSessions.set(chatId, session);
      await showEmotionKeyboard(chatId, messageId);
      break;
      
    case STATES.ENTERING_REASON:
      // –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ (–¥–ª—è –ø–µ—Ä–≤–æ–π —ç–º–æ—Ü–∏–∏)
      if (session.selectedEmotions.length > 0) {
        session.selectedEmotions.forEach(e => e.intensity = null);
        session.currentEmotionForIntensity = session.selectedEmotions[0].emotion;
        session.state = STATES.CHOOSING_INTENSITY_FOR_EMOTION;
        userSessions.set(chatId, session);
        await showIntensityKeyboard(chatId, messageId, session.currentEmotionForIntensity, 1, session.selectedEmotions.length);
      }
      break;
      
    default:
      await sendStartMessage(chatId);
      userSessions.delete(chatId);
  }
}

async function handleCancel(chatId, messageId) {
  const keyboard = {
    inline_keyboard: [[
      { text: 'üìù –í–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å', callback_data: 'add_entry' }
    ]]
  };
  
  const text = `‚ùå <b>–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞</b>

–î–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤.`;
  
  await editMessage(chatId, messageId, text, keyboard);
  userSessions.delete(chatId);
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendStartMessage(chatId) {
  const keyboard = {
    inline_keyboard: [[
      { text: 'üìù –í–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å', callback_data: 'add_entry' }
    ]]
  };
  
  const text = `üåü <b>–î–Ω–µ–≤–Ω–∏–∫ —ç–º–æ—Ü–∏–π</b>

–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å —Å–µ–±—è.

–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±–∏—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–º–æ—Ü–∏–π –∑–∞ —Ä–∞–∑ –∏ —É–∫–∞–∑—ã–≤–∞—Ç—å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–π –∏–∑ –Ω–∏—Ö.

–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤–µ–¥–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞ —ç–º–æ—Ü–∏–π –ø–æ–º–æ–∂–µ—Ç:
‚Ä¢ –í—ã—è–≤–∏—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
‚Ä¢ –ü–æ–Ω—è—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π  
‚Ä¢ –†–∞–∑–≤–∏—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç
‚Ä¢ –£–ª—É—á—à–∏—Ç—å —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ

–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å üëá`;

  await sendMessage(chatId, text, keyboard);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —ç–º–æ—Ü–∏–π (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä)
async function showEmotionKeyboard(chatId, messageId) {
  const session = userSessions.get(chatId);
  const emotions = Object.keys(EMOTIONS);
  const keyboard = { inline_keyboard: [] };

  // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–∏ (–ø–æ 1 –≤ —Ä—è–¥ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö)
  emotions.forEach(emotion => {
    const emoji = EMOTIONS[emotion];
    const isSelected = session.selectedEmotions.some(e => e.emotion === emotion);
    const text = isSelected 
      ? `‚úÖ ${emoji} ${emotion.charAt(0).toUpperCase() + emotion.slice(1)}`
      : `${emoji} ${emotion.charAt(0).toUpperCase() + emotion.slice(1)}`;
    
    keyboard.inline_keyboard.push([{
      text: text,
      callback_data: `emotion_${emotion}`
    }]);
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  const controlButtons = [];
  if (session.selectedEmotions.length > 0) {
    controlButtons.push({ text: '‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data: 'done_selecting_emotions' });
  }
  controlButtons.push({ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel' });
  
  keyboard.inline_keyboard.push(controlButtons);

  let text = `üé≠ <b>–ß—Ç–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?</b>

–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–º–æ—Ü–∏–π. –ù–∞–∂–º–∏ –Ω–∞ —ç–º–æ—Ü–∏—é —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å/—É–±—Ä–∞—Ç—å –µ—ë.`;

  if (session.selectedEmotions.length > 0) {
    text += `\n\n<b>–í—ã–±—Ä–∞–Ω–æ —ç–º–æ—Ü–∏–π:</b> ${session.selectedEmotions.length}`;
  }

  await editMessage(chatId, messageId, text, keyboard);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
async function showIntensityKeyboard(chatId, messageId, emotion, currentNumber, totalNumber) {
  const keyboard = {
    inline_keyboard: [
      [{ text: '–°–ª–∞–±–∞—è (1-3)', callback_data: 'ignore' }],
      [
        { text: '1Ô∏è‚É£', callback_data: 'intensity_1' },
        { text: '2Ô∏è‚É£', callback_data: 'intensity_2' },
        { text: '3Ô∏è‚É£', callback_data: 'intensity_3' }
      ],
      [{ text: '–°—Ä–µ–¥–Ω—è—è (4-7)', callback_data: 'ignore' }],
      [
        { text: '4Ô∏è‚É£', callback_data: 'intensity_4' },
        { text: '5Ô∏è‚É£', callback_data: 'intensity_5' },
        { text: '6Ô∏è‚É£', callback_data: 'intensity_6' },
        { text: '7Ô∏è‚É£', callback_data: 'intensity_7' }
      ],
      [{ text: '–°–∏–ª—å–Ω–∞—è (8-10)', callback_data: 'ignore' }],
      [
        { text: '8Ô∏è‚É£', callback_data: 'intensity_8' },
        { text: '9Ô∏è‚É£', callback_data: 'intensity_9' },
        { text: 'üîü', callback_data: 'intensity_10' }
      ],
      [
        { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back' },
        { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel' }
      ]
    ]
  };

  const emoji = EMOTIONS[emotion];
  const text = `üìä <b>–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —ç–º–æ—Ü–∏–∏ ${currentNumber}/${totalNumber}</b>

üé≠ <b>${emoji} ${emotion}</b>

–ù–∞—Å–∫–æ–ª—å–∫–æ —Å–∏–ª—å–Ω–æ —Ç—ã —ç—Ç–æ –æ—â—É—â–∞–µ—à—å?
–í—ã–±–µ—Ä–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:`;

  await editMessage(chatId, messageId, text, keyboard);
}

// –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É —ç–º–æ—Ü–∏–π
async function askForReason(chatId, messageId, selectedEmotions) {
  const keyboard = {
    inline_keyboard: [
      [
        { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back' },
        { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel' }
      ]
    ]
  };

  let emotionsText = '';
  selectedEmotions.forEach((emotionData, index) => {
    const emoji = EMOTIONS[emotionData.emotion];
    let level, levelEmoji;
    if (emotionData.intensity <= 3) {
      level = '—Å–ª–∞–±–∞—è';
      levelEmoji = 'üîµ';
    } else if (emotionData.intensity <= 7) {
      level = '—Å—Ä–µ–¥–Ω—è—è';
      levelEmoji = 'üü¢';
    } else {
      level = '—Å–∏–ª—å–Ω–∞—è';
      levelEmoji = 'üü†';
    }
    
    emotionsText += `${index + 1}. ${emoji} ${emotionData.emotion} - ${levelEmoji} ${level} (${emotionData.intensity}/10)\n`;
  });

  const text = `üí≠ <b>–ü–æ—á–µ–º—É —Ç—ã —ç—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å?</b>

<b>–í—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–º–æ—Ü–∏–∏:</b>
${emotionsText}
–û–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—É –∏–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑–≤–∞–ª–∞ —ç—Ç–∏ —á—É–≤—Å—Ç–≤–∞:`;

  await editMessage(chatId, messageId, text, keyboard);
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —ç–º–æ—Ü–∏–π
async function saveEmotionEntry(chatId, reason) {
  const session = userSessions.get(chatId);
  if (!session || session.selectedEmotions.length === 0) {
    await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ —Å –∫–Ω–æ–ø–∫–∏ "üìù –í–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å".');
    return;
  }

  console.log(`Saving emotions: ${session.selectedEmotions.length} emotions - ${reason}`);
  
  const success = await writeToSheetWithMerge(session.selectedEmotions, reason);
  
  if (success) {
    const keyboard = {
      inline_keyboard: [
        [{ text: 'üìù –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –∑–∞–ø–∏—Å—å', callback_data: 'add_entry' }],
        [{ text: 'üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—É', url: `https://docs.google.com/spreadsheets/d/${GOOGLE_SHEET_ID}/edit` }]
      ]
    };

    let emotionsText = '';
    session.selectedEmotions.forEach((emotionData, index) => {
      const emoji = EMOTIONS[emotionData.emotion];
      let level, levelEmoji;
      if (emotionData.intensity <= 3) {
        level = '—Å–ª–∞–±–∞—è';
        levelEmoji = 'üîµ';
      } else if (emotionData.intensity <= 7) {
        level = '—Å—Ä–µ–¥–Ω—è—è';
        levelEmoji = 'üü¢';
      } else {
        level = '—Å–∏–ª—å–Ω–∞—è';
        levelEmoji = 'üü†';
      }
      
      emotionsText += `${index + 1}. ${emoji} ${emotionData.emotion} - ${levelEmoji} ${level} (${emotionData.intensity}/10)\n`;
    });

    const text = `‚úÖ <b>–ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!</b>

<b>–≠–º–æ—Ü–∏–∏:</b>
${emotionsText}
üí≠ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${reason}`;

    await sendMessage(chatId, text, keyboard);
    userSessions.delete(chatId);
  } else {
    await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ Google –¢–∞–±–ª–∏—Ü—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.');
  }
}

// –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    googleSheets: sheetsClient ? 'initialized' : 'not initialized'
  });
});

app.get('/', (req, res) => {
  res.send(`
    <h1>ü§ñ Telegram Emotion Bot</h1>
    <p>‚úÖ Server is running on Render!</p>
    <p>üìä Google Sheets: ${sheetsClient ? '‚úÖ Connected' : '‚ùå Not connected'}</p>
    <p>üïê Started: ${new Date().toISOString()}</p>
    <p><a href="/health">Health Check</a></p>
  `);
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
  console.log('üöÄ Starting Telegram Emotion Bot...');
  console.log(`üìä Google Sheets ID: ${GOOGLE_SHEET_ID}`);
  console.log(`ü§ñ Telegram Bot Token: ${TELEGRAM_TOKEN ? 'Configured ‚úÖ' : 'Missing ‚ùå'}`);
  
  await initializeGoogleSheets();
  
  app.listen(PORT, () => {
    console.log(`üöÄ Server running on port ${PORT}`);
    console.log(`üåê Health check: http://localhost:${PORT}/health`);
    console.log(`üì± Webhook endpoint: http://localhost:${PORT}/webhook`);
  });
}

startServer().catch(error => {
  console.error('‚ùå Failed to start server:', error);
  process.exit(1);
});
