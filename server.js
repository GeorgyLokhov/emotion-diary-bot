const express = require('express');
const { google } = require('googleapis');
require('dotenv').config();

const app = express();
app.use(express.json());

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const GOOGLE_SHEET_ID = process.env.GOOGLE_SHEET_ID;
const PORT = process.env.PORT || 3000;

// –≠–º–æ—Ü–∏–∏ —Å —ç–º–æ–¥–∑–∏
const EMOTIONS = {
  '—Ä–∞–¥–æ—Å—Ç—å': 'üòä',
  '–≥—Ä—É—Å—Ç—å': 'üò¢', 
  '–∑–ª–æ—Å—Ç—å': 'üò†',
  '—Å—Ç—Ä–∞—Ö': 'üò∞',
  '–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ': 'ü§¢',
  '–∏–Ω—Ç–µ—Ä–µ—Å': 'ü§î',
  '–±–µ–∑—Ä–∞–∑–ª–∏—á–∏–µ': 'üòê',
  '–ø—Ä–∏—è—Ç–Ω—É—é_—É—Å—Ç–∞–ª–æ—Å—Ç—å': 'üòå',
  '—Ç—Ä–µ–≤–æ–≥—É': 'üòü',
  '–≤–∏–Ω—É': 'üòî'
};

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π
const userSessions = new Map();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets API
let sheetsClient;
async function initializeGoogleSheets() {
  try {
    let auth;
    
    // –ü—Ä–æ–±—É–µ–º Secret File —Å–Ω–∞—á–∞–ª–∞
    try {
      auth = new google.auth.GoogleAuth({
        keyFile: '/etc/secrets/google-credentials.json',
        scopes: ['https://www.googleapis.com/auth/spreadsheets']
      });
      console.log('‚úÖ Using Secret File credentials');
    } catch (error) {
      console.log('Secret file not found, trying environment variable...');
      
      // Fallback –Ω–∞ Environment Variable
      if (process.env.GOOGLE_CREDENTIALS) {
        const credentials = JSON.parse(process.env.GOOGLE_CREDENTIALS);
        auth = new google.auth.GoogleAuth({
          credentials: credentials,
          scopes: ['https://www.googleapis.com/auth/spreadsheets']
        });
        console.log('‚úÖ Using Environment Variable credentials');
      } else {
        throw new Error('No Google credentials found');
      }
    }
    
    sheetsClient = google.sheets({ version: 'v4', auth });
    console.log('‚úÖ Google Sheets API initialized successfully');
    
  } catch (error) {
    console.error('‚ùå Google Sheets initialization failed:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –≤ Google Sheets (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–∏—Å—Ç–∞)
async function writeToSheet(emotion, intensity, reason) {
  try {
    const currentTime = new Date().toLocaleString('ru-RU', { 
      timeZone: 'Europe/Moscow',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–∏—Å—Ç–∞ - –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –ø–µ—Ä–≤–æ–º—É –ª–∏—Å—Ç—É)
    const headerCheck = await sheetsClient.spreadsheets.values.get({
      spreadsheetId: GOOGLE_SHEET_ID,
      range: 'A1:D1',
    });
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if (!headerCheck.data.values || !headerCheck.data.values[0] || headerCheck.data.values[0][0] !== '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è') {
      await sheetsClient.spreadsheets.values.update({
        spreadsheetId: GOOGLE_SHEET_ID,
        range: 'A1:D1',
        valueInputOption: 'RAW',
        resource: {
          values: [['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è', '–≠–º–æ—Ü–∏—è', '–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å', '–ü—Ä–∏—á–∏–Ω–∞']]
        }
      });
      console.log('‚úÖ Headers created');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    await sheetsClient.spreadsheets.values.append({
      spreadsheetId: GOOGLE_SHEET_ID,
      range: 'A:D',
      valueInputOption: 'RAW',
      resource: {
        values: [[currentTime, emotion, intensity, reason]]
      }
    });
    
    console.log(`‚úÖ Data written to Google Sheets: ${emotion} (${intensity}) - ${reason}`);
    return true;
    
  } catch (error) {
    console.error('‚ùå Error writing to Google Sheets:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
async function sendMessage(chatId, text, keyboard = null) {
  const url = `https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`;
  const payload = {
    chat_id: chatId,
    text: text,
    parse_mode: 'HTML'
  };
  
  if (keyboard) {
    payload.reply_markup = JSON.stringify(keyboard);
  }
  
  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error('Telegram API error:', errorText);
    } else {
      console.log(`‚úÖ Message sent to ${chatId}`);
    }
  } catch (error) {
    console.error('Send message error:', error);
  }
}

async function editMessage(chatId, messageId, text, keyboard = null) {
  const url = `https://api.telegram.org/bot${TELEGRAM_TOKEN}/editMessageText`;
  const payload = {
    chat_id: chatId,
    message_id: messageId,
    text: text,
    parse_mode: 'HTML'
  };
  
  if (keyboard) {
    payload.reply_markup = JSON.stringify(keyboard);
  }
  
  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    
    if (!response.ok) {
      console.error('Edit message error:', await response.text());
    }
  } catch (error) {
    console.error('Edit message error:', error);
  }
}

async function answerCallbackQuery(callbackQueryId) {
  const url = `https://api.telegram.org/bot${TELEGRAM_TOKEN}/answerCallbackQuery`;
  
  try {
    await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ callback_query_id: callbackQueryId })
    });
  } catch (error) {
    console.error('Answer callback error:', error);
  }
}

// Webhook endpoint –¥–ª—è Telegram
app.post('/webhook', async (req, res) => {
  try {
    const update = req.body;
    
    // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º Telegram
    res.status(200).json({ status: 'ok' });
    
    console.log('Update received:', JSON.stringify(update));
    
    if (update.message) {
      await handleMessage(update.message);
    } else if (update.callback_query) {
      await handleCallback(update.callback_query);
    }
    
  } catch (error) {
    console.error('Webhook error:', error);
    res.status(200).json({ status: 'error' });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function handleMessage(message) {
  const chatId = message.chat.id;
  const text = message.text || '';
  
  console.log(`Message from ${chatId}: "${text}"`);
  
  if (text === '/start') {
    await sendStartMessage(chatId);
  } else {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ–º –ª–∏ –ø—Ä–∏—á–∏–Ω—É —ç–º–æ—Ü–∏–∏
    const session = userSessions.get(chatId);
    if (session && session.emotion && session.intensity !== undefined) {
      await saveEmotionEntry(chatId, text);
    } else {
      await sendMessage(chatId, 'ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É "üìù –í–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å" –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –¥–Ω–µ–≤–Ω–∏–∫–æ–º —ç–º–æ—Ü–∏–π.');
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
async function handleCallback(callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const messageId = callbackQuery.message.message_id;
  const data = callbackQuery.data;
  
  console.log(`Callback from ${chatId}: ${data}`);
  
  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
  await answerCallbackQuery(callbackQuery.id);
  
  if (data === 'add_entry') {
    userSessions.delete(chatId);
    await showEmotionKeyboard(chatId, messageId);
  } else if (data.startsWith('emotion_')) {
    const emotion = data.replace('emotion_', '');
    userSessions.set(chatId, { emotion });
    await showIntensityKeyboard(chatId, messageId, emotion);
  } else if (data.startsWith('intensity_')) {
    const intensity = parseInt(data.replace('intensity_', ''));
    const session = userSessions.get(chatId) || {};
    userSessions.set(chatId, { ...session, intensity });
    await askForReason(chatId, messageId, session.emotion, intensity);
  } else if (data === 'ignore') {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    return;
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendStartMessage(chatId) {
  const keyboard = {
    inline_keyboard: [[
      { text: 'üìù –í–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å', callback_data: 'add_entry' }
    ]]
  };
  
  const text = `üåü <b>–î–Ω–µ–≤–Ω–∏–∫ —ç–º–æ—Ü–∏–π</b>

–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å —Å–µ–±—è.

–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤–µ–¥–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞ —ç–º–æ—Ü–∏–π –ø–æ–º–æ–∂–µ—Ç:
‚Ä¢ –í—ã—è–≤–∏—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
‚Ä¢ –ü–æ–Ω—è—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π  
‚Ä¢ –†–∞–∑–≤–∏—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç
‚Ä¢ –£–ª—É—á—à–∏—Ç—å —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ

–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å üëá`;

  await sendMessage(chatId, text, keyboard);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —ç–º–æ—Ü–∏–π
async function showEmotionKeyboard(chatId, messageId) {
  const emotions = Object.keys(EMOTIONS);
  const keyboard = { inline_keyboard: [] };

  for (let i = 0; i < emotions.length; i += 2) {
    const row = [];
    for (let j = 0; j < 2 && i + j < emotions.length; j++) {
      const emotion = emotions[i + j];
      const emoji = EMOTIONS[emotion];
      row.push({
        text: `${emoji} ${emotion.charAt(0).toUpperCase() + emotion.slice(1).replace('_', ' ')}`,
        callback_data: `emotion_${emotion}`
      });
    }
    keyboard.inline_keyboard.push(row);
  }

  const text = `üé≠ <b>–ß—Ç–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?</b>

–í—ã–±–µ—Ä–∏ —ç–º–æ—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–≤–æ–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:`;

  await editMessage(chatId, messageId, text, keyboard);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
async function showIntensityKeyboard(chatId, messageId, emotion) {
  const keyboard = {
    inline_keyboard: [
      [{ text: '–°–ª–∞–±–∞—è (1-3)', callback_data: 'ignore' }],
      [
        { text: '1Ô∏è‚É£ 1', callback_data: 'intensity_1' },
        { text: '2Ô∏è‚É£ 2', callback_data: 'intensity_2' },
        { text: '3Ô∏è‚É£ 3', callback_data: 'intensity_3' }
      ],
      [{ text: '–°—Ä–µ–¥–Ω—è—è (4-7)', callback_data: 'ignore' }],
      [
        { text: '4Ô∏è‚É£ 4', callback_data: 'intensity_4' },
        { text: '5Ô∏è‚É£ 5', callback_data: 'intensity_5' },
        { text: '6Ô∏è‚É£ 6', callback_data: 'intensity_6' },
        { text: '7Ô∏è‚É£ 7', callback_data: 'intensity_7' }
      ],
      [{ text: '–°–∏–ª—å–Ω–∞—è (8-10)', callback_data: 'ignore' }],
      [
        { text: '8Ô∏è‚É£ 8', callback_data: 'intensity_8' },
        { text: '9Ô∏è‚É£ 9', callback_data: 'intensity_9' },
        { text: 'üîü 10', callback_data: 'intensity_10' }
      ]
    ]
  };

  const emoji = EMOTIONS[emotion];
  const text = `üìä <b>–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —á—É–≤—Å—Ç–≤–∞: ${emoji} ${emotion.replace('_', ' ')}</b>

–ù–∞—Å–∫–æ–ª—å–∫–æ —Å–∏–ª—å–Ω–æ —Ç—ã —ç—Ç–æ –æ—â—É—â–∞–µ—à—å?
–í—ã–±–µ—Ä–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:`;

  await editMessage(chatId, messageId, text, keyboard);
}

// –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É —ç–º–æ—Ü–∏–∏
async function askForReason(chatId, messageId, emotion, intensity) {
  let level, levelEmoji;
  if (intensity <= 3) {
    level = '—Å–ª–∞–±–∞—è';
    levelEmoji = 'üü¢';
  } else if (intensity <= 7) {
    level = '—Å—Ä–µ–¥–Ω—è—è';
    levelEmoji = 'üü°';
  } else {
    level = '—Å–∏–ª—å–Ω–∞—è';
    levelEmoji = 'üî¥';
  }

  const text = `üí≠ <b>–ü–æ—á–µ–º—É —Ç—ã —ç—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å?</b>

–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: ${levelEmoji} ${level} (${intensity}/10)

–û–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—É –∏–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑–≤–∞–ª–∞ —ç—Ç–æ —á—É–≤—Å—Ç–≤–æ.
–ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ - —è –∑–∞–ø–∏—Å—ã–≤–∞—é –≤—Å–µ –¥–µ—Ç–∞–ª–∏:`;

  await editMessage(chatId, messageId, text);
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —ç–º–æ—Ü–∏–∏
async function saveEmotionEntry(chatId, reason) {
  const session = userSessions.get(chatId);
  if (!session || !session.emotion || session.intensity === undefined) {
    await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ —Å –∫–Ω–æ–ø–∫–∏ "üìù –í–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å".');
    return;
  }

  const { emotion, intensity } = session;
  
  console.log(`Saving emotion: ${emotion} (${intensity}) - ${reason}`);
  
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google Sheets
  const success = await writeToSheet(emotion.replace('_', ' '), intensity, reason);
  
  if (success) {
    const emoji = EMOTIONS[emotion];
    let level, levelEmoji;
    if (intensity <= 3) {
      level = '—Å–ª–∞–±–∞—è';
      levelEmoji = 'üü¢';
    } else if (intensity <= 7) {
      level = '—Å—Ä–µ–¥–Ω—è—è';
      levelEmoji = 'üü°';
    } else {
      level = '—Å–∏–ª—å–Ω–∞—è';
      levelEmoji = 'üî¥';
    }

    const keyboard = {
      inline_keyboard: [[
        { text: 'üìù –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –∑–∞–ø–∏—Å—å', callback_data: 'add_entry' }
      ]]
    };

    const text = `‚úÖ <b>–ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!</b>

üé≠ –≠–º–æ—Ü–∏—è: ${emoji} ${emotion.replace('_', ' ')}
üìä –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: ${levelEmoji} ${level} (${intensity}/10)
üí≠ –ü—Ä–∏—á–∏–Ω–∞: ${reason}

–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —ç–º–æ—Ü–∏–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Å–µ–±—è.`;

    await sendMessage(chatId, text, keyboard);
    userSessions.delete(chatId);
  } else {
    await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ Google –¢–∞–±–ª–∏—Ü—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.');
  }
}

// –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    googleSheets: sheetsClient ? 'initialized' : 'not initialized'
  });
});

app.get('/', (req, res) => {
  res.send(`
    <h1>ü§ñ Telegram Emotion Bot</h1>
    <p>‚úÖ Server is running on Render!</p>
    <p>üìä Google Sheets: ${sheetsClient ? '‚úÖ Connected' : '‚ùå Not connected'}</p>
    <p>üïê Started: ${new Date().toISOString()}</p>
    <p><a href="/health">Health Check</a></p>
  `);
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
  console.log('üöÄ Starting Telegram Emotion Bot...');
  console.log(`üìä Google Sheets ID: ${GOOGLE_SHEET_ID}`);
  console.log(`ü§ñ Telegram Bot Token: ${TELEGRAM_TOKEN ? 'Configured ‚úÖ' : 'Missing ‚ùå'}`);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Sheets
  await initializeGoogleSheets();
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
  app.listen(PORT, () => {
    console.log(`üöÄ Server running on port ${PORT}`);
    console.log(`üåê Health check: http://localhost:${PORT}/health`);
    console.log(`üì± Webhook endpoint: http://localhost:${PORT}/webhook`);
  });
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
startServer().catch(error => {
  console.error('‚ùå Failed to start server:', error);
  process.exit(1);
});
