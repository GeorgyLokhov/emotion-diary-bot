const express = require('express');
const { google } = require('googleapis');
require('dotenv').config();

const app = express();
app.use(express.json());

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const GOOGLE_SHEET_ID = process.env.GOOGLE_SHEET_ID;
const PORT = process.env.PORT || 3000;

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
const STATES = {
  NONE: 'none',
  CHOOSING_EMOTIONS: 'choosing_emotions',
  CHOOSING_INTENSITY_FOR_EMOTION: 'choosing_intensity_for_emotion',
  ENTERING_REASON: 'entering_reason'
};

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —ç–º–æ—Ü–∏–∏ —Å —ç–º–æ–¥–∑–∏
const EMOTIONS = {
  '—Ä–∞–¥–æ—Å—Ç—å': 'üòä',
  '—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å': 'üòé',
  '–∏–Ω—Ç–µ—Ä–µ—Å': 'ü§î',
  '–ø—Ä–∏—è—Ç–Ω–∞—è —É—Å—Ç–∞–ª–æ—Å—Ç—å': 'üôÇ‚Äç‚ÜïÔ∏è',
  '—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ': 'üòå',
  '–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è': 'üóúÔ∏è',
  '—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ': 'üôÇ',
  '–≤–æ–ª–Ω–µ–Ω–∏–µ': 'üò¨',
  '–±–ª—É–∂–¥–∞—é—â–µ–µ –≤–Ω–∏–º–∞–Ω–∏–µ': 'üò∂‚Äçüå´Ô∏è',
  '–∞–ø–∞—Ç–∏—è/–±–µ–∑—Ä–∞–∑–ª–∏—á–∏–µ': 'üò∂',
  '—É—Å—Ç–∞–ª–æ—Å—Ç—å': 'üòû',
  '—Å–º—è—Ç–µ–Ω–∏–µ/—Ä–∞—Å—Ç–µ—Ä—è–Ω–Ω–æ—Å—Ç—å': 'ü´§',
  '—Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ': 'üò†',
  '—Ç—Ä–µ–≤–æ–≥–∞': 'üòü',
  '—Å—Ç—ã–¥/–≤–∏–Ω–∞': 'üò£',
  '–¥–∏–∑–º–æ—Ä–∞–ª—å/–ø–æ–¥–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç—å': 'üòñ',
  '–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ': 'ü§¨'
};

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π
const userSessions = new Map();

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
function createSession() {
  return {
    state: STATES.NONE,
    selectedEmotions: [],
    currentEmotionIndex: -1,
    previousState: null,
    messageId: null
  };
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets API
let sheetsClient;
async function initializeGoogleSheets() {
  try {
    let auth;
    
    try {
      auth = new google.auth.GoogleAuth({
        keyFile: '/etc/secrets/google-credentials.json',
        scopes: ['https://www.googleapis.com/auth/spreadsheets']
      });
      console.log('Using Secret File credentials');
    } catch (error) {
      console.log('Secret file not found, trying environment variable...');
      
      if (process.env.GOOGLE_CREDENTIALS) {
        const credentials = JSON.parse(process.env.GOOGLE_CREDENTIALS);
        auth = new google.auth.GoogleAuth({
          credentials: credentials,
          scopes: ['https://www.googleapis.com/auth/spreadsheets']
        });
        console.log('Using Environment Variable credentials');
      } else {
        throw new Error('No Google credentials found');
      }
    }
    
    sheetsClient = google.sheets({ version: 'v4', auth });
    console.log('Google Sheets API initialized successfully');
    
  } catch (error) {
    console.error('Google Sheets initialization failed:', error);
  }
}

// –í–ê–ñ–ù–û: –û–ü–†–ï–î–ï–õ–Ø–ï–ú –í–°–ï –§–£–ù–ö–¶–ò–ò GOOGLE SHEETS –í –ü–†–ê–í–ò–õ–¨–ù–û–ú –ü–û–†–Ø–î–ö–ï

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø –∑–∞–ø–∏—Å–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã
function findMergeGroups(data) {
  console.log('Analyzing data for merge groups...');
  console.log('Total rows:', data.length);
  
  if (data.length <= 1) {
    console.log('Not enough data for merging');
    return [];
  }

  const groups = [];
  let currentGroup = null;
  
  for (let i = 1; i < data.length; i++) {
    const row = data[i];
    console.log(`Row ${i + 1}:`, row);
    
    if (!row || row.length < 3) {
      console.log(`Skipping row ${i + 1} - insufficient data`);
      continue;
    }
    
    const [date, time, emotion, intensity, comment] = row;
    
    if (date && time) {
      console.log(`New group started at row ${i + 1}`);
      
      if (currentGroup && currentGroup.rows.length > 1) {
        console.log(`Finished group: rows ${currentGroup.startRow + 1}-${currentGroup.endRow + 1}`);
        groups.push(currentGroup);
      }
      
      currentGroup = {
        startRow: i,
        endRow: i,
        rows: [i],
        date: date,
        time: time,
        comment: comment
      };
    } else if (currentGroup && !date && !time && emotion) {
      console.log(`Adding row ${i + 1} to current group`);
      currentGroup.endRow = i;
      currentGroup.rows.push(i);
    } else {
      console.log(`Row ${i + 1} doesn't fit any pattern`);
    }
  }
  
  if (currentGroup && currentGroup.rows.length > 1) {
    console.log(`Finished last group: rows ${currentGroup.startRow + 1}-${currentGroup.endRow + 1}`);
    groups.push(currentGroup);
  }
  
  console.log(`Found ${groups.length} groups for merging`);
  return groups;
}

// –£–º–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —è—á–µ–µ–∫ - –û–ü–†–ï–î–ï–õ–Ø–ï–ú –ü–ï–†–ï–î –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï–ú
async function smartMergeCells() {
  try {
    console.log('Starting smart merge process...');
    
    const allData = await sheetsClient.spreadsheets.values.get({
      spreadsheetId: GOOGLE_SHEET_ID,
      range: 'A:E',
    });
    
    if (!allData.data.values) {
      console.log('No data to merge');
      return;
    }
    
    const data = allData.data.values;
    console.log('Retrieved data for merging, rows:', data.length);
    
    const mergeGroups = findMergeGroups(data);
    
    if (mergeGroups.length === 0) {
      console.log('No groups found for merging');
      return;
    }
    
    console.log(`Found ${mergeGroups.length} groups for merging`);
    
    console.log('Unmerging existing cells...');
    try {
      await sheetsClient.spreadsheets.batchUpdate({
        spreadsheetId: GOOGLE_SHEET_ID,
        resource: {
          requests: [
            {
              unmergeCells: {
                range: {
                  sheetId: 0,
                  startColumnIndex: 0,
                  endColumnIndex: 1
                }
              }
            },
            {
              unmergeCells: {
                range: {
                  sheetId: 0,
                  startColumnIndex: 1,
                  endColumnIndex: 2
                }
              }
            },
            {
              unmergeCells: {
                range: {
                  sheetId: 0,
                  startColumnIndex: 4,
                  endColumnIndex: 5
                }
              }
            }
          ]
        }
      });
      console.log('All cells unmerged');
    } catch (unmergeError) {
      console.log('No cells to unmerge (normal)');
    }

    const mergeRequests = [];
    
    mergeGroups.forEach((group, index) => {
      const startRowIndex = group.startRow;
      const endRowIndex = group.endRow + 1;
      
      console.log(`Group ${index + 1}: merging rows ${startRowIndex + 1}-${endRowIndex} (API: ${startRowIndex}-${endRowIndex})`);
      
      mergeRequests.push({
        mergeCells: {
          range: {
            sheetId: 0,
            startRowIndex: startRowIndex,
            endRowIndex: endRowIndex,
            startColumnIndex: 0,
            endColumnIndex: 1
          },
          mergeType: 'MERGE_ALL'
        }
      });

      mergeRequests.push({
        mergeCells: {
          range: {
            sheetId: 0,
            startRowIndex: startRowIndex,
            endRowIndex: endRowIndex,
            startColumnIndex: 1,
            endColumnIndex: 2
          },
          mergeType: 'MERGE_ALL'
        }
      });

      if (group.comment && group.comment.trim()) {
        mergeRequests.push({
          mergeCells: {
            range: {
              sheetId: 0,
              startRowIndex: startRowIndex,
              endRowIndex: endRowIndex,
              startColumnIndex: 4,
              endColumnIndex: 5
            },
            mergeType: 'MERGE_ALL'
          }
        });
      }
    });

    if (mergeRequests.length > 0) {
      console.log(`Executing ${mergeRequests.length} merge requests...`);
      await sheetsClient.spreadsheets.batchUpdate({
        spreadsheetId: GOOGLE_SHEET_ID,
        resource: {
          requests: mergeRequests
        }
      });
      console.log(`Successfully merged ${mergeRequests.length} cell ranges`);
    } else {
      console.log('No merge requests to execute');
    }
    
  } catch (error) {
    console.error('Smart merge error:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –≤ Google Sheets —Å —É–º–Ω—ã–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º —è—á–µ–µ–∫ - –ü–û–°–õ–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø smartMergeCells
async function writeToSheetWithSmartMerge(selectedEmotions, reason) {
  try {
    const now = new Date();
    const currentDateTime = now.toLocaleString('ru-RU', { 
      timeZone: 'Europe/Moscow',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
    });
    
    const [dateStr, timeStr] = currentDateTime.split(', ');
    
    console.log(`Saving data: Date=${dateStr}, Time=${timeStr}, Emotions=${selectedEmotions.length}`);
    
    const headerCheck = await sheetsClient.spreadsheets.values.get({
      spreadsheetId: GOOGLE_SHEET_ID,
      range: 'A1:E1',
    });
    
    if (!headerCheck.data.values || !headerCheck.data.values[0] || headerCheck.data.values[0][0] !== '–î–∞—Ç–∞') {
      await sheetsClient.spreadsheets.values.update({
        spreadsheetId: GOOGLE_SHEET_ID,
        range: 'A1:E1',
        valueInputOption: 'RAW',
        resource: {
          values: [['–î–∞—Ç–∞', '–í—Ä–µ–º—è', '–ß—Ç–æ —è —á—É–≤—Å—Ç–≤—É—é?', '–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å', '–ü–æ—á–µ–º—É —è —ç—Ç–æ —á—É–≤—Å—Ç–≤—É—é?']]
        }
      });
      console.log('Headers created');
    }

    const values = [];
    selectedEmotions.forEach((emotionData, index) => {
      if (index === 0) {
        values.push([dateStr, timeStr, emotionData.emotion, emotionData.intensity, reason]);
      } else {
        values.push(['', '', emotionData.emotion, emotionData.intensity, '']);
      }
    });

    console.log('Writing data:', values);

    await sheetsClient.spreadsheets.values.append({
      spreadsheetId: GOOGLE_SHEET_ID,
      range: 'A:E',
      valueInputOption: 'RAW',
      resource: {
        values: values
      }
    });

    console.log('Data written, waiting 2 seconds before merging...');
    await new Promise(resolve => setTimeout(resolve, 2000));

    if (selectedEmotions.length > 1) {
      await smartMergeCells();
    }
    
    console.log(`Data written to Google Sheets: ${selectedEmotions.length} emotions`);
    return true;
    
  } catch (error) {
    console.error('Error writing to Google Sheets:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
async function sendMessage(chatId, text, keyboard = null) {
  const url = `https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`;
  const payload = {
    chat_id: chatId,
    text: text,
    parse_mode: 'HTML'
  };
  
  if (keyboard) {
    payload.reply_markup = JSON.stringify(keyboard);
  }
  
  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error('Telegram API error:', errorText);
    } else {
      console.log(`Message sent to ${chatId}`);
    }
  } catch (error) {
    console.error('Send message error:', error);
  }
}

async function editMessage(chatId, messageId, text, keyboard = null) {
  const url = `https://api.telegram.org/bot${TELEGRAM_TOKEN}/editMessageText`;
  const payload = {
    chat_id: chatId,
    message_id: messageId,
    text: text,
    parse_mode: 'HTML'
  };
  
  if (keyboard) {
    payload.reply_markup = JSON.stringify(keyboard);
  }
  
  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    
    if (!response.ok) {
      console.error('Edit message error:', await response.text());
    }
  } catch (error) {
    console.error('Edit message error:', error);
  }
}

async function answerCallbackQuery(callbackQueryId) {
  const url = `https://api.telegram.org/bot${TELEGRAM_TOKEN}/answerCallbackQuery`;
  
  try {
    await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ callback_query_id: callbackQueryId })
    });
  } catch (error) {
    console.error('Answer callback error:', error);
  }
}

// Webhook endpoint –¥–ª—è Telegram
app.post('/webhook', async (req, res) => {
  try {
    const update = req.body;
    res.status(200).json({ status: 'ok' });
    console.log('Update received:', JSON.stringify(update));
    
    if (update.message) {
      await handleMessage(update.message);
    } else if (update.callback_query) {
      await handleCallback(update.callback_query);
    }
    
  } catch (error) {
    console.error('Webhook error:', error);
    res.status(200).json({ status: 'error' });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function handleMessage(message) {
  const chatId = message.chat.id;
  const text = message.text || '';
  
  console.log(`Message from ${chatId}: "${text}"`);
  
  if (text === '/start') {
    userSessions.delete(chatId);
    await sendStartMessage(chatId);
  } else {
    const session = userSessions.get(chatId);
    
    if (session && session.state === STATES.ENTERING_REASON && 
        session.selectedEmotions.length > 0) {
      await saveEmotionEntry(chatId, text);
    } else {
      const keyboard = {
        inline_keyboard: [[
          { text: 'üìù –í–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å', callback_data: 'add_entry' }
        ]]
      };
      
      await sendMessage(chatId, 
        'ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É "üìù –í–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å" –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –¥–Ω–µ–≤–Ω–∏–∫–æ–º —ç–º–æ—Ü–∏–π.', 
        keyboard);
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
async function handleCallback(callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const messageId = callbackQuery.message.message_id;
  const data = callbackQuery.data;
  
  console.log(`Callback from ${chatId}: ${data}`);
  
  await answerCallbackQuery(callbackQuery.id);
  
  let session = userSessions.get(chatId) || createSession();
  session.messageId = messageId;
  
  if (data === 'add_entry') {
    session = createSession();
    session.state = STATES.CHOOSING_EMOTIONS;
    session.messageId = messageId;
    userSessions.set(chatId, session);
    await showEmotionKeyboard(chatId, messageId);
    
  } else if (data === 'done_selecting_emotions') {
    if (session.selectedEmotions.length === 0) {
      return;
    }
    session.currentEmotionIndex = 0;
    session.state = STATES.CHOOSING_INTENSITY_FOR_EMOTION;
    userSessions.set(chatId, session);
    await showIntensityKeyboard(chatId, messageId, session);
    
  } else if (data === 'back') {
    await handleBack(chatId, messageId, session);
    
  } else if (data === 'cancel') {
    await handleCancel(chatId, messageId);
    
  } else if (data.startsWith('emotion_')) {
    const emotion = data.replace('emotion_', '');
    await toggleEmotion(chatId, messageId, session, emotion);
    
  } else if (data.startsWith('intensity_')) {
    const intensity = parseInt(data.replace('intensity_', ''));
    await setIntensityForCurrentEmotion(chatId, messageId, session, intensity);
    
  } else if (data === 'ignore') {
    return;
  }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —ç–º–æ—Ü–∏–∏
async function toggleEmotion(chatId, messageId, session, emotion) {
  const existingIndex = session.selectedEmotions.findIndex(e => e.emotion === emotion);
  
  if (existingIndex >= 0) {
    session.selectedEmotions.splice(existingIndex, 1);
  } else {
    session.selectedEmotions.push({ emotion, intensity: null });
  }
  
  userSessions.set(chatId, session);
  await showEmotionKeyboard(chatId, messageId);
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —ç–º–æ—Ü–∏–∏
async function setIntensityForCurrentEmotion(chatId, messageId, session, intensity) {
  if (session.currentEmotionIndex >= 0 && session.currentEmotionIndex < session.selectedEmotions.length) {
    session.selectedEmotions[session.currentEmotionIndex].intensity = intensity;
  }
  
  session.currentEmotionIndex++;
  
  if (session.currentEmotionIndex < session.selectedEmotions.length) {
    userSessions.set(chatId, session);
    await showIntensityKeyboard(chatId, messageId, session);
  } else {
    session.state = STATES.ENTERING_REASON;
    session.currentEmotionIndex = -1;
    userSessions.set(chatId, session);
    await askForReason(chatId, messageId, session.selectedEmotions);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏ –æ—Ç–º–µ–Ω—ã
async function handleBack(chatId, messageId, session) {
  switch (session.state) {
    case STATES.CHOOSING_INTENSITY_FOR_EMOTION:
      if (session.currentEmotionIndex > 0) {
        session.currentEmotionIndex--;
        session.selectedEmotions[session.currentEmotionIndex].intensity = null;
        userSessions.set(chatId, session);
        await showIntensityKeyboard(chatId, messageId, session);
      } else {
        session.state = STATES.CHOOSING_EMOTIONS;
        session.currentEmotionIndex = -1;
        session.selectedEmotions.forEach(e => e.intensity = null);
        userSessions.set(chatId, session);
        await showEmotionKeyboard(chatId, messageId);
      }
      break;
      
    case STATES.ENTERING_REASON:
      if (session.selectedEmotions.length > 0) {
        session.selectedEmotions.forEach(e => e.intensity = null);
        session.currentEmotionIndex = session.selectedEmotions.length - 1;
        session.state = STATES.CHOOSING_INTENSITY_FOR_EMOTION;
        userSessions.set(chatId, session);
        await showIntensityKeyboard(chatId, messageId, session);
      }
      break;
      
    default:
      await sendStartMessage(chatId);
      userSessions.delete(chatId);
  }
}

async function handleCancel(chatId, messageId) {
  const keyboard = {
    inline_keyboard: [[
      { text: 'üìù –í–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å', callback_data: 'add_entry' }
    ]]
  };
  
  const text = `‚ùå <b>–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞</b>

–î–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤.`;
  
  await editMessage(chatId, messageId, text, keyboard);
  userSessions.delete(chatId);
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendStartMessage(chatId) {
  const keyboard = {
    inline_keyboard: [[
      { text: 'üìù –í–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å', callback_data: 'add_entry' }
    ]]
  };
  
  const text = `üåü <b>–î–Ω–µ–≤–Ω–∏–∫ —ç–º–æ—Ü–∏–π</b>

–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å —Å–µ–±—è.

–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±–∏—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–º–æ—Ü–∏–π –∑–∞ —Ä–∞–∑ –∏ —É–∫–∞–∑—ã–≤–∞—Ç—å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–π –∏–∑ –Ω–∏—Ö.

–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤–µ–¥–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞ —ç–º–æ—Ü–∏–π –ø–æ–º–æ–∂–µ—Ç:
‚Ä¢ –í—ã—è–≤–∏—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
‚Ä¢ –ü–æ–Ω—è—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π  
‚Ä¢ –†–∞–∑–≤–∏—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç
‚Ä¢ –£–ª—É—á—à–∏—Ç—å —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ

–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å üëá`;

  await sendMessage(chatId, text, keyboard);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —ç–º–æ—Ü–∏–π (–≤ 2 —Å—Ç–æ–ª–±—Ü–∞)
async function showEmotionKeyboard(chatId, messageId) {
  const session = userSessions.get(chatId);
  const emotions = Object.keys(EMOTIONS);
  const keyboard = { inline_keyboard: [] };

  for (let i = 0; i < emotions.length; i += 2) {
    const row = [];
    
    const emotion1 = emotions[i];
    const emoji1 = EMOTIONS[emotion1];
    const isSelected1 = session.selectedEmotions.some(e => e.emotion === emotion1);
    const text1 = isSelected1 
      ? `‚úÖ ${emoji1} ${emotion1.charAt(0).toUpperCase() + emotion1.slice(1)}`
      : `${emoji1} ${emotion1.charAt(0).toUpperCase() + emotion1.slice(1)}`;
    
    row.push({
      text: text1,
      callback_data: `emotion_${emotion1}`
    });
    
    if (i + 1 < emotions.length) {
      const emotion2 = emotions[i + 1];
      const emoji2 = EMOTIONS[emotion2];
      const isSelected2 = session.selectedEmotions.some(e => e.emotion === emotion2);
      const text2 = isSelected2 
        ? `‚úÖ ${emoji2} ${emotion2.charAt(0).toUpperCase() + emotion2.slice(1)}`
        : `${emoji2} ${emotion2.charAt(0).toUpperCase() + emotion2.slice(1)}`;
      
      row.push({
        text: text2,
        callback_data: `emotion_${emotion2}`
      });
    }
    
    keyboard.inline_keyboard.push(row);
  }

  const controlButtons = [];
  if (session.selectedEmotions.length > 0) {
    controlButtons.push({ text: '‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data: 'done_selecting_emotions' });
  }
  controlButtons.push({ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel' });
  
  keyboard.inline_keyboard.push(controlButtons);

  let text = `üé≠ <b>–ß—Ç–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?</b>

–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–º–æ—Ü–∏–π. –ù–∞–∂–º–∏ –Ω–∞ —ç–º–æ—Ü–∏—é —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å/—É–±—Ä–∞—Ç—å –µ—ë.`;

  if (session.selectedEmotions.length > 0) {
    text += `\n\n<b>–í—ã–±—Ä–∞–Ω–æ —ç–º–æ—Ü–∏–π:</b> ${session.selectedEmotions.length}`;
  }

  await editMessage(chatId, messageId, text, keyboard);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
async function showIntensityKeyboard(chatId, messageId, session) {
  const currentEmotion = session.selectedEmotions[session.currentEmotionIndex];
  const currentNumber = session.currentEmotionIndex + 1;
  const totalNumber = session.selectedEmotions.length;
  
  const keyboard = {
    inline_keyboard: [
      [{ text: '–°–ª–∞–±–∞—è (1-3)', callback_data: 'ignore' }],
      [
        { text: '1Ô∏è‚É£', callback_data: 'intensity_1' },
        { text: '2Ô∏è‚É£', callback_data: 'intensity_2' },
        { text: '3Ô∏è‚É£', callback_data: 'intensity_3' }
      ],
      [{ text: '–°—Ä–µ–¥–Ω—è—è (4-7)', callback_data: 'ignore' }],
      [
        { text: '4Ô∏è‚É£', callback_data: 'intensity_4' },
        { text: '5Ô∏è‚É£', callback_data: 'intensity_5' },
        { text: '6Ô∏è‚É£', callback_data: 'intensity_6' },
        { text: '7Ô∏è‚É£', callback_data: 'intensity_7' }
      ],
      [{ text: '–°–∏–ª—å–Ω–∞—è (8-10)', callback_data: 'ignore' }],
      [
        { text: '8Ô∏è‚É£', callback_data: 'intensity_8' },
        { text: '9Ô∏è‚É£', callback_data: 'intensity_9' },
        { text: 'üîü', callback_data: 'intensity_10' }
      ],
      [
        { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back' },
        { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel' }
      ]
    ]
  };

  const emoji = EMOTIONS[currentEmotion.emotion];
  const text = `üìä <b>–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —ç–º–æ—Ü–∏–∏ ${currentNumber}/${totalNumber}</b>

üé≠ <b>${emoji} ${currentEmotion.emotion}</b>

–ù–∞—Å–∫–æ–ª—å–∫–æ —Å–∏–ª—å–Ω–æ —Ç—ã —ç—Ç–æ –æ—â—É—â–∞–µ—à—å?
–í—ã–±–µ—Ä–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:`;

  await editMessage(chatId, messageId, text, keyboard);
}

// –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É —ç–º–æ—Ü–∏–π
async function askForReason(chatId, messageId, selectedEmotions) {
  const keyboard = {
    inline_keyboard: [
      [
        { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back' },
        { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel' }
      ]
    ]
  };

  let emotionsText = '';
  selectedEmotions.forEach((emotionData, index) => {
    const emoji = EMOTIONS[emotionData.emotion];
    let level, levelEmoji;
    if (emotionData.intensity <= 3) {
      level = '—Å–ª–∞–±–∞—è';
      levelEmoji = 'üîµ';
    } else if (emotionData.intensity <= 7) {
      level = '—Å—Ä–µ–¥–Ω—è—è';
      levelEmoji = 'üü¢';
    } else {
      level = '—Å–∏–ª—å–Ω–∞—è';
      levelEmoji = 'üü†';
    }
    
    emotionsText += `${index + 1}. ${emoji} ${emotionData.emotion} - ${levelEmoji} ${level} (${emotionData.intensity}/10)\n`;
  });

  const text = `üí≠ <b>–ü–æ—á–µ–º—É —Ç—ã —ç—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å?</b>

<b>–í—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–º–æ—Ü–∏–∏:</b>
${emotionsText}
–û–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—É –∏–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑–≤–∞–ª–∞ —ç—Ç–∏ —á—É–≤—Å—Ç–≤–∞:`;

  await editMessage(chatId, messageId, text, keyboard);
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —ç–º–æ—Ü–∏–π
async function saveEmotionEntry(chatId, reason) {
  const session = userSessions.get(chatId);
  if (!session || session.selectedEmotions.length === 0) {
    await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ —Å –∫–Ω–æ–ø–∫–∏ "üìù –í–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å".');
    return;
  }

  console.log(`Saving emotions: ${session.selectedEmotions.length} emotions - ${reason}`);
  
  const success = await writeToSheetWithSmartMerge(session.selectedEmotions, reason);
  
  if (success) {
    const keyboard = {
      inline_keyboard: [
        [{ text: 'üìù –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –∑–∞–ø–∏—Å—å', callback_data: 'add_entry' }],
        [{ text: 'üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—É', url: `https://docs.google.com/spreadsheets/d/${GOOGLE_SHEET_ID}/edit` }]
      ]
    };

    let emotionsText = '';
    session.selectedEmotions.forEach((emotionData, index) => {
      const emoji = EMOTIONS[emotionData.emotion];
      let level, levelEmoji;
      if (emotionData.intensity <= 3) {
        level = '—Å–ª–∞–±–∞—è';
        levelEmoji = 'üîµ';
      } else if (emotionData.intensity <= 7) {
        level = '—Å—Ä–µ–¥–Ω—è—è';
        levelEmoji = 'üü¢';
      } else {
        level = '—Å–∏–ª—å–Ω–∞—è';
        levelEmoji = 'üü†';
      }
      
      emotionsText += `${index + 1}. ${emoji} ${emotionData.emotion} - ${levelEmoji} ${level} (${emotionData.intensity}/10)\n`;
    });

    const text = `‚úÖ <b>–ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!</b>

<b>–≠–º–æ—Ü–∏–∏:</b>
${emotionsText}
üí≠ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${reason}`;

    await sendMessage(chatId, text, keyboard);
    userSessions.delete(chatId);
  } else {
    await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ Google –¢–∞–±–ª–∏—Ü—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.');
  }
}

// –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    googleSheets: sheetsClient ? 'initialized' : 'not initialized'
  });
});

app.get('/', (req, res) => {
  res.send(`
    <h1>ü§ñ Telegram Emotion Bot</h1>
    <p>‚úÖ Server is running on Render!</p>
    <p>üìä Google Sheets: ${sheetsClient ? '‚úÖ Connected' : '‚ùå Not connected'}</p>
    <p>üïê Started: ${new Date().toISOString()}</p>
    <p><a href="/health">Health Check</a></p>
  `);
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
  console.log('Starting Telegram Emotion Bot...');
  console.log(`Google Sheets ID: ${GOOGLE_SHEET_ID}`);
  console.log(`Telegram Bot Token: ${TELEGRAM_TOKEN ? 'Configured' : 'Missing'}`);
  
  await initializeGoogleSheets();
  
  app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
    console.log(`Health check: http://localhost:${PORT}/health`);
    console.log(`Webhook endpoint: http://localhost:${PORT}/webhook`);
  });
}

startServer().catch(error => {
  console.error('Failed to start server:', error);
  process.exit(1);
});
